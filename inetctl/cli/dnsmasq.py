import ipaddress
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import typer

# Import from our new core modules
from inetctl.core.config_loader import LOADED_CONFIG_PATH, load_config, save_config
from inetctl.core.utils import check_root_privileges, get_active_leases, run_command

# Define the top-level 'dnsmasq' Typer application
app = typer.Typer(
    name="dnsmasq", help="Manage Dnsmasq configurations.", no_args_is_help=True
)

# Define the nested 'reservations' Typer application
reservations_app = typer.Typer(
    name="reservations", help="Discover and manage DHCP reservations.", no_args_is_help=True
)
app.add_typer(reservations_app)


@app.command("apply-reservations")
def dnsmasq_apply_reservations(
    dry_run: bool = typer.Option(
        False, "--dry-run", help="Print what would be done, but don't make changes."
    )
):
    """Generates Dnsmasq DHCP reservation files from config and reloads Dnsmasq."""
    config = load_config()
    hosts = config.get("hosts_dhcp_reservations", [])
    dnsmasq_cfg_dir_str = config.get("global_settings", {}).get("dnsmasq_config_dir")

    if not dnsmasq_cfg_dir_str:
        typer.echo(
            typer.style(
                "Error: 'dnsmasq_config_dir' not defined in global_settings.",
                fg=typer.colors.RED,
                bold=True,
            )
        )
        raise typer.Exit(code=1)

    dnsmasq_config_dir = Path(dnsmasq_cfg_dir_str)

    if not hosts:
        typer.echo(
            typer.style(
                "No 'hosts_dhcp_reservations' found in config. No files changed.",
                fg=typer.colors.YELLOW,
            )
        )
        return

    if not dry_run:
        check_root_privileges(f"write Dnsmasq config files to '{dnsmasq_config_dir}'")
        try:
            dnsmasq_config_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            typer.echo(
                typer.style(
                    f"Error creating directory {dnsmasq_config_dir}: {e}",
                    fg=typer.colors.RED,
                    bold=True,
                )
            )
            raise typer.Exit(code=1)

    reservations_by_vlan: Dict[int, List[str]] = {}
    for host_entry in hosts:
        vlan_id = host_entry.get("vlan_id")
        mac = host_entry.get("mac_address")
        ip_addr = host_entry.get("ip_address")
        hostname = host_entry.get("desired_hostname", host_entry.get("id"))

        if not all([isinstance(vlan_id, int), mac, ip_addr, hostname]):
            continue

        reservation_line = f"dhcp-host={mac},{ip_addr},{hostname}"
        reservations_by_vlan.setdefault(vlan_id, []).append(reservation_line)

    files_written = 0
    for vlan_id, lines in reservations_by_vlan.items():
        filename = f"10-inetctl-reservations-vlan{vlan_id}.conf"
        file_path = dnsmasq_config_dir / filename
        lines.sort()
        header = f"# Dnsmasq DHCP reservations for VLAN {vlan_id}\n# Generated by inetctl from {LOADED_CONFIG_PATH}\n"
        content = header + "\n".join(lines) + "\n"

        if dry_run:
            typer.echo(
                typer.style(
                    f"\n--- DRY RUN: Would write to {file_path} ---\n{content.strip()}",
                    bold=True,
                    fg=typer.colors.CYAN,
                )
            )
            files_written += 1
            continue

        try:
            with open(file_path, "w") as f:
                f.write(content)
            typer.echo(
                typer.style(
                    f"Successfully wrote Dnsmasq config: {file_path}",
                    fg=typer.colors.GREEN,
                )
            )
            files_written += 1
        except Exception as e:
            typer.echo(
                typer.style(
                    f"Error writing Dnsmasq config file {file_path}: {e}",
                    fg=typer.colors.RED,
                    bold=True,
                )
            )
            raise typer.Exit(code=1)

    if files_written > 0:
        typer.echo(
            typer.style("\nAttempting to reload Dnsmasq service...", fg=typer.colors.CYAN)
        )
        run_command(["systemctl", "reload", "dnsmasq"], dry_run=dry_run)


def _add_reservation_to_config(host_entry: Dict[str, Any]) -> Tuple[bool, str]:
    """Helper to add a new host entry to server_config.json."""
    config = load_config(force_reload=True)
    if "hosts_dhcp_reservations" not in config:
        config["hosts_dhcp_reservations"] = []

    new_id, new_mac = host_entry["id"].lower(), host_entry["mac_address"].lower()
    for existing_host in config["hosts_dhcp_reservations"]:
        if existing_host.get("id", "").lower() == new_id:
            return False, f"Error: Host ID '{host_entry['id']}' already exists."
        if existing_host.get("mac_address", "").lower() == new_mac:
            return False, f"Error: MAC address '{host_entry['mac_address']}' already exists."

    config["hosts_dhcp_reservations"].append(host_entry)
    config["hosts_dhcp_reservations"].sort(key=lambda x: x.get("id", ""))

    if save_config(config):
        return True, f"Successfully added reservation for '{host_entry['id']}'."
    else:
        return False, "Error: Failed to save configuration."


def _interactive_reservation_add(config: Dict[str, Any], combined_data: Dict[str, Any]):
    """Handles the interactive workflow for adding a new reservation."""
    typer.echo(typer.style("\n--- Interactive Reservation Mode ---", bold=True))
    promotable = [
        (mac, data) for mac, data in combined_data.items() if data["status"] == "[LEASE]"
    ]

    if not promotable:
        typer.echo("No new devices (status [LEASE]) to promote.")
        return

    typer.echo("The following new devices can be added:")
    for i, (mac, data) in enumerate(promotable):
        typer.echo(f"  {typer.style(str(i + 1), bold=True)}: {data['ip']:<16} {data['hostname']}")

    while True:
        try:
            choice_str = typer.prompt("\nEnter device number to add (or 'q' to quit)")
            if choice_str.lower() == "q":
                break

            choice_num = int(choice_str)
            if 1 <= choice_num <= len(promotable):
                mac, data = promotable[choice_num - 1]

                new_id = typer.prompt("Enter a unique Host ID")
                new_hostname = typer.prompt(
                    "Enter permanent hostname", default=data["hostname"]
                )
                new_vlan_id = typer.prompt("Enter VLAN ID", type=int)

                new_host_entry = {
                    "id": new_id,
                    "vlan_id": new_vlan_id,
                    "mac_address": mac,
                    "ip_address": data["ip"],
                    "desired_hostname": new_hostname,
                    "manage_snat_rule": False,
                    "description": f"Reservation for {new_hostname}",
                }

                success, message = _add_reservation_to_config(new_host_entry)
                if success:
                    typer.echo(
                        typer.style(
                            "Reservation added. Run 'dnsmasq apply-reservations' to activate.",
                            fg=typer.colors.GREEN,
                            bold=True,
                        )
                    )
                else:
                    typer.echo(typer.style(message, fg=typer.colors.RED, bold=True))
                break
            else:
                typer.echo(typer.style("Invalid number.", fg=typer.colors.RED))
        except ValueError:
            typer.echo(typer.style("Invalid input.", fg=typer.colors.RED))


@reservations_app.command("list")
def reservations_list_cmd(
    interactive: bool = typer.Option(
        False, "-i", "--interactive", help="Enter interactive mode to add a new lease."
    )
):
    """Shows active DHCP leases and configured static reservations."""
    config = load_config()
    leases_file = config.get("global_settings", {}).get("dnsmasq_leases_file")
    if not leases_file:
        typer.echo(
            typer.style(
                "Error: 'dnsmasq_leases_file' not in global_settings.",
                fg=typer.colors.RED,
                bold=True,
            )
        )
        raise typer.Exit(code=1)

    active_leases = get_active_leases(leases_file)
    static_reservations = config.get("hosts_dhcp_reservations", [])
    static_macs = {
        res.get("mac_address", "").lower(): res for res in static_reservations
    }
    combined_data = {}

    for mac, res_data in static_macs.items():
        combined_data[mac] = {
            "ip": res_data.get("ip_address", "N/A"),
            "hostname": res_data.get("desired_hostname", res_data.get("id")),
            "status": "[STATIC]",
        }

    for lease in active_leases:
        mac = lease["mac"]
        if mac in combined_data:
            combined_data[mac]["status"] = "[LEASE+STATIC]"
            combined_data[mac]["ip"] = lease["ip"]
            combined_data[mac]["hostname"] = lease["hostname"]
        else:
            combined_data[mac] = {
                "ip": lease["ip"],
                "hostname": lease["hostname"],
                "status": "[LEASE]",
            }

    typer.echo(
        typer.style(
            f"\n{'STATUS':<15} {'IP ADDRESS':<18} {'MAC ADDRESS':<20} {'HOSTNAME'}",
            bold=True,
        )
    )
    typer.echo(f"{'-'*14:<15} {'-'*17:<18} {'-'*19:<20} {'-'*30}")

    if not combined_data:
        typer.echo("No active leases or static reservations found.")
        return

    sorted_macs = sorted(
        combined_data.keys(), key=lambda m: ipaddress.ip_address(combined_data[m]["ip"])
    )

    for mac in sorted_macs:
        device = combined_data[mac]
        status_color = (
            typer.colors.CYAN
            if device["status"] == "[STATIC]"
            else typer.colors.YELLOW
            if device["status"] == "[LEASE]"
            else typer.colors.GREEN
        )
        typer.echo(
            typer.style(f"{device['status']:<15}", fg=status_color)
            + f" {device['ip']:<17} {mac:<19} {device['hostname']}"
        )

    if interactive:
        _interactive_reservation_add(config, combined_data)


@reservations_app.command("add")
def reservations_add_cmd(
    host_id: str = typer.Option(..., "--id"),
    mac: str = typer.Option(..., "--mac"),
    ip: str = typer.Option(..., "--ip"),
    hostname: str = typer.Option(..., "--hostname"),
    vlan_id: int = typer.Option(..., "--vlan-id"),
):
    """Adds a new DHCP reservation to server_config.json."""
    new_host_entry = {
        "id": host_id,
        "vlan_id": vlan_id,
        "mac_address": mac,
        "ip_address": ip,
        "desired_hostname": hostname,
        "manage_snat_rule": False,
        "description": "Created via CLI",
    }
    success, message = _add_reservation_to_config(new_host_entry)
    if success:
        typer.echo(
            typer.style(
                "Reservation added. Run 'dnsmasq apply-reservations' to activate.",
                fg=typer.colors.GREEN,
                bold=True,
            )
        )
    else:
        typer.echo(typer.style(message, fg=typer.colors.RED, bold=True))
        raise typer.Exit(code=1)


@reservations_app.command("delete")
def reservations_delete_cmd(
    host_id: str = typer.Argument(...),
    force: bool = typer.Option(False, "-f", "--force"),
):
    """Deletes a DHCP reservation from server_config.json."""
    config = load_config(force_reload=True)
    if not force and not typer.confirm(
        f"Delete reservation for host ID '{host_id}'?"
    ):
        raise typer.Abort()

    original_count = len(config.get("hosts_dhcp_reservations", []))
    config["hosts_dhcp_reservations"] = [
        h
        for h in config.get("hosts_dhcp_reservations", [])
        if h.get("id", "").lower() != host_id.lower()
    ]

    if len(config.get("hosts_dhcp_reservations", [])) == original_count:
        typer.echo(
            typer.style(f"Host ID '{host_id}' not found.", fg=typer.colors.YELLOW)
        )
        return

    if save_config(config):
        typer.echo(
            typer.style(
                f"Deleted reservation for '{host_id}'. Run 'dnsmasq apply-reservations'.",
                fg=typer.colors.GREEN,
                bold=True,
            )
        )
    else:
        raise typer.Exit(code=1)


@reservations_app.command("update")
def reservations_update_cmd(
    host_id: str = typer.Argument(...),
    new_ip: Optional[str] = typer.Option(None, "--new-ip"),
    new_hostname: Optional[str] = typer.Option(None, "--new-hostname"),
    new_vlan_id: Optional[int] = typer.Option(None, "--new-vlan-id"),
    new_description: Optional[str] = typer.Option(None, "--new-description"),
    manage_snat: Optional[bool] = typer.Option(None, "--manage-snat/--no-manage-snat"),
):
    """Updates an existing DHCP reservation."""
    config = load_config(force_reload=True)
    host_to_update, host_index = (None, -1)

    for i, host in enumerate(config.get("hosts_dhcp_reservations", [])):
        if host.get("id", "").lower() == host_id.lower():
            host_to_update, host_index = host, i
            break

    if not host_to_update:
        typer.echo(
            typer.style(f"Error: Host ID '{host_id}' not found.", fg=typer.colors.RED, bold=True)
        )
        raise typer.Exit(code=1)

    changes_made = False
    if new_ip is not None:
        host_to_update["ip_address"] = new_ip
        changes_made = True
    if new_hostname is not None:
        host_to_update["desired_hostname"] = new_hostname
        changes_made = True
    if new_vlan_id is not None:
        host_to_update["vlan_id"] = new_vlan_id
        changes_made = True
    if new_description is not None:
        host_to_update["description"] = new_description
        changes_made = True
    if manage_snat is not None:
        host_to_update["manage_snat_rule"] = manage_snat
        changes_made = True

    if not changes_made:
        typer.echo(
            typer.style(
                "No new values provided. No changes made.", fg=typer.colors.YELLOW
            )
        )
        return

    config["hosts_dhcp_reservations"][host_index] = host_to_update

    if save_config(config):
        typer.echo(
            typer.style(
                f"\nUpdated reservation for '{host_id}'. Run 'dnsmasq apply-reservations'.",
                fg=typer.colors.GREEN,
                bold=True,
            )
        )
    else:
        raise typer.Exit(code=1)
