from pathlib import Path
from typing import Dict, List
from itertools import combinations_with_replacement
import re

from inetctl.core.netplan import get_vlan_subnets

def apply_shorewall_config(file_path_str: str, new_content: str, managed_block_name: str = None) -> bool:
    """Safely writes new content to a Shorewall configuration file."""
    file_path = Path(file_path_str)
    if not file_path.parent.exists(): return False
    file_path.touch(mode=0o640, exist_ok=True); current_content = file_path.read_text()
    if not managed_block_name:
        if current_content.strip() == new_content.strip(): return False
        file_path.write_text(new_content); return True
    start_marker = f"# --- INETCTL MANAGED {managed_block_name} START ---"
    end_marker = f"# --- INETCTL MANAGED {managed_block_name} END ---"
    managed_content_with_markers = f"{start_marker}\n{new_content.strip()}\n{end_marker}\n"
    block_pattern = re.compile(f"{re.escape(start_marker)}.*?{re.escape(end_marker)}", re.DOTALL)
    if block_pattern.search(current_content): updated_content = block_pattern.sub(managed_content_with_markers, current_content)
    else: updated_content = current_content.strip() + "\n\n" + managed_content_with_markers
    if current_content.strip() == updated_content.strip(): return False
    file_path.write_text(updated_content); return True


def parse_shorewall_interfaces() -> Dict[str, List[str]]:
    """
    Parses /etc/shorewall/interfaces to map zones to interfaces,
    CORRECTLY ignoring directives like '?FORMAT 2'.
    """
    interfaces_file = Path("/etc/shorewall/interfaces")
    if not interfaces_file.exists(): return {}
    zone_map = {}
    try:
        with open(interfaces_file, 'r') as f:
            for line in f.readlines():
                line = line.strip()
                # --- THE CORRECTED PARSING LOGIC ---
                if not line or line.startswith('#') or line.startswith('?'):
                    continue
                parts = re.split(r'\s+', line)
                if len(parts) >= 2 and parts[0] != '-' and parts[1] != '-':
                    zone_map.setdefault(parts[0], []).append(parts[1])
    except IOError:
        return {}
    return zone_map


def generate_accounting_rules(config: Dict) -> str:
    """
    Generates /etc/shorewall/accounting with simplified and correct logic.
    """
    header = [ "# This file is auto-generated by inetctl.", "# Defines zone-based accounting tables." ]
    try:
        vlan_subnets = get_vlan_subnets()
        zone_interfaces = parse_shorewall_interfaces()
    except Exception as e:
        return f"\n".join(header + [f"# ERROR: Could not parse system config: {e}"])
        
    rules = []
    for zone, interfaces in zone_interfaces.items():
        # Heuristic to find the 'primary' interface for a zone (the one with the subnet)
        primary_iface, subnet = None, None
        for iface in interfaces:
            if iface in vlan_subnets:
                primary_iface = iface
                subnet = vlan_subnets[iface]
                break
        
        if not subnet:
            continue # Skip zones we can't find a subnet for (like 'net')

        # This simpler logic ensures all traffic involving the zone's subnet is counted.
        # It creates one rule for the zone and its associated subnet.
        # This relies on Shorewall's ability to correctly track traffic to/from this subnet
        # and assign it to the 'zone' table.
        rules.append(f"ACCOUNT({zone},{subnet})\t-\t-\t\t-")
            
    return "\n".join(header + ["#\n# ACTION\tSOURCE\tDEST"] + sorted(list(set(rules)))) + "\n"


def generate_mangle_rules(config: Dict) -> str:
    """Generates the content for /etc/shorewall/mangle (tcrules)."""
    gs = config.get("global_settings", {}); known_hosts = config.get("known_hosts", [])
    qos_policies = gs.get("qos_policies", {}); header = ["# This file is auto-generated...", "# ACTION\tSOURCE\tDEST"]; rules = []
    if qos_policies:
        policy_to_mark = {name: d["fw_mark"] for name, d in qos_policies.items() if "fw_mark" in d}
        static_hosts = [h for h in known_hosts if h.get("ip_assignment", {}).get("type") == "static"]
        for host in static_hosts:
            if (p:=host.get("qos_policy")) and (m:=policy_to_mark.get(p)) and (ip:=host.get("ip_assignment", {}).get("ip")):
                rules.append(f"MARK({m})\t\t{ip}\t\t0.0.0.0/0")
    return "\n".join(header + rules) + "\n"