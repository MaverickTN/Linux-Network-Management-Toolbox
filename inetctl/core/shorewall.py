from pathlib import Path
from typing import Dict, List
from itertools import permutations
import re

from inetctl.core.netplan import get_vlan_subnets

def apply_shorewall_config(file_path_str: str, new_content: str, managed_block_name: str = None) -> bool:
    # This function is correct and does not need changes.
    file_path = Path(file_path_str)
    if not file_path.parent.exists(): return False
    file_path.touch(mode=0o640, exist_ok=True); current_content = file_path.read_text()
    if not managed_block_name:
        if current_content.strip() == new_content.strip(): return False
        file_path.write_text(new_content); return True
    start_marker = f"# --- INETCTL MANAGED {managed_block_name} START ---"
    end_marker = f"# --- INETCTL MANAGED {managed_block_name} END ---"
    managed_content_with_markers = f"{start_marker}\n{new_content.strip()}\n{end_marker}\n"
    block_pattern = re.compile(f"{re.escape(start_marker)}.*?{re.escape(end_marker)}", re.DOTALL)
    if block_pattern.search(current_content): updated_content = block_pattern.sub(managed_content_with_markers, current_content)
    else: updated_content = current_content.strip() + "\n\n" + managed_content_with_markers
    if current_content.strip() == updated_content.strip(): return False
    file_path.write_text(updated_content); return True

def parse_shorewall_interfaces() -> Dict[str, List[str]]:
    # This function is parsing correctly based on the logs and does not need changes.
    interfaces_file = Path("/etc/shorewall/interfaces")
    if not interfaces_file.exists(): return {}
    zone_map = {}
    try:
        with open(interfaces_file, 'r') as f:
            for line in f.readlines():
                line = line.strip()
                if not line or line.startswith('#'): continue
                parts = re.split(r'\s+', line)
                if len(parts) >= 2 and parts[0] != '-' and parts[1] != '-':
                    zone_map.setdefault(parts[0], []).append(parts[1])
    except IOError: return {}
    return zone_map

def generate_accounting_rules(config: Dict) -> str:
    """
    Generates /etc/shorewall/accounting rules using the corrected logic
    that matches interfaces from Shorewall to subnets from Netplan.
    """
    header = [ "# This file is auto-generated by inetctl. Do not edit manually.", "# Defines zone-based accounting tables for the xt_ACCOUNT module." ]
    try:
        vlan_subnets = get_vlan_subnets()
        zone_interfaces = parse_shorewall_interfaces()
        all_system_interfaces = list(set(item for sublist in zone_interfaces.values() for item in sublist))
    except Exception as e:
        return f"\n".join(header + [f"# ERROR: Could not parse network configuration: {e}"])
        
    rules = []
    # --- NEW, CORRECTED LOGIC BASED ON YOUR ANALYSIS ---
    for zone, interfaces in zone_interfaces.items():
        # For each interface within this zone (e.g., 'enp2s0.15')
        for iface_name in interfaces:
            # Check if this specific interface has a defined subnet in Netplan
            subnet = vlan_subnets.get(iface_name)
            if not subnet:
                continue # Skip interfaces like 'wg15' that don't have a subnet in netplan
            
            # We found a match! Generate the rules for this Zone/Subnet combo.
            # Traffic from this zone's other interfaces to this one
            other_zone_ifaces = set(interfaces) - {iface_name}
            for other_iface in other_zone_ifaces:
                 rules.append(f"ACCOUNT({zone},{subnet})\t-\t{iface_name}\t{other_iface}")
                 rules.append(f"ACCOUNT({zone},{subnet})\t-\t{other_iface}\t{iface_name}")
                 
            # Traffic from ALL other zones' interfaces to this one
            all_other_interfaces = set(all_system_interfaces) - set(interfaces)
            for other_iface in all_other_interfaces:
                 rules.append(f"ACCOUNT({zone},{subnet})\t-\t{iface_name}\t{other_iface}")
                 rules.append(f"ACCOUNT({zone},{subnet})\t-\t{other_iface}\t{iface_name}")

            # Traffic between this interface and the firewall itself
            rules.append(f"ACCOUNT({zone},{subnet})\t-\t{iface_name}\t$FW")
            rules.append(f"ACCOUNT({zone},{subnet})\t-\t$FW\t\t{iface_name}")

    return "\n".join(header + ["#\n# ACTION\tSOURCE\tDEST"] + sorted(list(set(rules)))) + "\n"

def generate_mangle_rules(config: Dict) -> str: # Unchanged
    gs = config.get("global_settings", {}); known_hosts = config.get("known_hosts", [])
    qos_policies = gs.get("qos_policies", {}); header = ["# This file is auto-generated..."]; rules = []
    if qos_policies:
        policy_to_mark = {name: d["fw_mark"] for name,d in qos_policies.items() if "fw_mark" in d}
        for h in (h for h in known_hosts if h.get("ip_assignment",{}).get("type")=="static"):
            if (p:=h.get("qos_policy")) and (m:=policy_to_mark.get(p)) and (ip:=h.get("ip_assignment",{}).get("ip")):
                rules.append(f"MARK({m})\t\t{ip}\t\t0.0.0.0/0")
    return "\n".join(header + rules) + "\n"