from pathlib import Path
from typing import Dict, List
from itertools import permutations
import re

from inetctl.core.netplan import get_vlan_subnets

def parse_shorewall_interfaces() -> Dict[str, List[str]]:
    """
    Parses /etc/shorewall/interfaces to map zones to physical/virtual interfaces.
    Returns a dict like {'V15': ['enp2s0.15']}.
    """
    interfaces_file = Path("/etc/shorewall/interfaces")
    if not interfaces_file.exists(): return {}
    zone_map = {}
    try:
        with open(interfaces_file, 'r') as f:
            for line in f.readlines():
                line = line.strip()
                if not line or line.startswith('#'): continue
                parts = re.split(r'\s+', line)
                # Ensure the format has at least ZONE and INTERFACE columns
                if len(parts) >= 2 and parts[0] != '-' and parts[1] != '-':
                    zone, interface = parts[0], parts[1]
                    zone_map.setdefault(zone, []).append(interface)
    except IOError: return {}
    return zone_map


def generate_accounting_rules(config: Dict) -> str:
    """
    Generates /etc/shorewall/accounting rules based on the superior,
    zone-based iptaccount design.
    """
    header = [ "# This file is auto-generated by inetctl. Do not edit manually.", "# Defines zone-based accounting tables for the xt_ACCOUNT module." ]
    try:
        # These functions now provide the core data for our logic
        vlan_subnets = get_vlan_subnets()
        zone_interfaces = parse_shorewall_interfaces()
        all_system_interfaces = list(set(item for sublist in zone_interfaces.values() for item in sublist))
    except Exception as e:
        return f"\n".join(header + [f"# ERROR: Could not parse network configuration: {e}"])
        
    rules = []
    # Match Shorewall zone names (e.g., 'V15') with Netplan interface names (e.g., 'vlan15')
    for zone, interfaces in zone_interfaces.items():
        vlan_name_guess = zone.lower().replace('v','vlan')
        subnet = vlan_subnets.get(vlan_name_guess)
        if not subnet: continue # Skip zones that don't have a matching subnet in netplan

        # All traffic within the zone itself (between its own interfaces, if more than one)
        for if1, if2 in permutations(interfaces, 2):
            rules.append(f"ACCOUNT({zone},{subnet})\t-\t{if1}\t\t{if2}")
        # All traffic between this zone and any other known interface
        other_interfaces = set(all_system_interfaces) - set(interfaces)
        for zone_if in interfaces:
            for other_if in other_interfaces:
                rules.append(f"ACCOUNT({zone},{subnet})\t-\t{zone_if}\t\t{other_if}")
                rules.append(f"ACCOUNT({zone},{subnet})\t-\t{other_if}\t\t{zone_if}")
            # And also traffic from the zone to the router itself and vice-versa
            rules.append(f"ACCOUNT({zone},{subnet})\t-\t{zone_if}\t\t$FW")
            rules.append(f"ACCOUNT({zone},{subnet})\t-\t$FW\t\t{zone_if}")

    return "\n".join(header + ["#\n# ACTION\tSOURCE\tDEST"] + sorted(list(set(rules)))) + "\n"

# The other functions in this file remain the same (mangle rules, config application)
# Providing them in full for completeness as requested.
def generate_mangle_rules(config: Dict) -> str:
    gs = config.get("global_settings", {}); known_hosts = config.get("known_hosts", [])
    qos_policies = gs.get("qos_policies", {})
    header = ["# This file is auto-generated by inetctl. Do not edit manually.", "# Marks packets for Quality of Service (QoS).", "# ACTION\tSOURCE\t\tDEST"]
    rules = []
    if qos_policies:
        policy_to_mark = {name: details["fw_mark"] for name, details in qos_policies.items() if "fw_mark" in details}
        static_hosts = [h for h in known_hosts if h.get("ip_assignment", {}).get("type") == "static"]
        for host in static_hosts:
            policy, mark, ip = host.get("qos_policy"), policy_to_mark.get(host.get("qos_policy")), host.get("ip_assignment", {}).get("ip")
            if all([policy, mark, ip]): rules.append(f"MARK({mark})\t\t{ip}\t\t0.0.0.0/0")
    return "\n".join(header + rules) + "\n"

def apply_shorewall_config(file_path_str: str, new_content: str, managed_block_name: str = None) -> bool:
    file_path = Path(file_path_str)
    if not file_path.parent.exists(): return False
    file_path.touch(mode=0o640, exist_ok=True) 
    current_content = file_path.read_text()
    if not managed_block_name:
        if current_content.strip() == new_content.strip(): return False
        file_path.write_text(new_content)
        return True
    start_marker, end_marker = f"# --- INETCTL MANAGED {managed_block_name} START ---", f"# --- INETCTL MANAGED {managed_block_name} END ---"
    managed_content_with_markers = f"{start_marker}\n{new_content.strip()}\n{end_marker}\n"
    block_pattern = re.compile(f"{re.escape(start_marker)}.*?{re.escape(end_marker)}", re.DOTALL)
    if block_pattern.search(current_content):
        updated_content = block_pattern.sub(managed_content_with_markers, current_content)
    else: updated_content = current_content.strip() + "\n\n" + managed_content_with_markers
    if current_content.strip() == updated_content.strip(): return False
    file_path.write_text(updated_content)
    return True