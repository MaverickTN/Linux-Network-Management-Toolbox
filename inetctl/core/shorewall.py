from pathlib import Path
from typing import Dict, List
import re

from inetctl.core.utils import get_active_leases

def apply_shorewall_config(file_path_str: str, new_content: str, managed_block_name: str = None) -> bool:
    """Safely writes new content to a Shorewall configuration file."""
    file_path = Path(file_path_str)
    if not file_path.parent.exists(): return False

    file_path.touch(mode=0o640, exist_ok=True) 
    current_content = file_path.read_text()
    
    if not managed_block_name:
        if current_content.strip() == new_content.strip(): return False
        file_path.write_text(new_content)
        return True

    start_marker = f"# --- INETCTL MANAGED {managed_block_name} START ---"
    end_marker = f"# --- INETCTL MANAGED {managed_block_name} END ---"
    managed_content_with_markers = f"{start_marker}\n{new_content.strip()}\n{end_marker}\n"
    block_pattern = re.compile(f"{re.escape(start_marker)}.*?{re.escape(end_marker)}", re.DOTALL)
    
    if block_pattern.search(current_content):
        updated_content = block_pattern.sub(managed_content_with_markers, current_content)
    else:
        updated_content = current_content.strip() + "\n\n" + managed_content_with_markers

    if current_content.strip() == updated_content.strip(): return False
    file_path.write_text(updated_content)
    return True

def generate_accounting_rules(config: Dict) -> str:
    """Generates the content for /etc/shorewall/accounting."""
    gs = config.get("global_settings", {})
    leases_file = gs.get("dnsmasq_leases_file", "")
    active_leases = get_active_leases(leases_file) if leases_file else []
    header = [
        "# This file is auto-generated by inetctl. Do not edit manually.",
        "# CHAIN\t\tACTION\tSOURCE\t\tDEST"
    ]
    rules = []
    processed_macs = set()
    for device in active_leases:
        mac = device.get("mac")
        if not mac or mac in processed_macs: continue
        ip = device.get("ip")
        if not ip: continue
        mac_sanitized = mac.replace(':', '')
        chain_name = f"acct_{mac_sanitized}"
        rules.append(f"{chain_name}\t-\t-\t\t{ip}")
        rules.append(f"{chain_name}\t-\t{ip}\t\t-")
        processed_macs.add(mac)
    return "\n".join(header + sorted(list(set(rules)))) + "\n"

def generate_mangle_rules(config: Dict) -> str:
    """
    Generates the content for /etc/shorewall/mangle (tcrules).
    This version removes the invalid CONNMARK rule entirely.
    """
    gs = config.get("global_settings", {}); known_hosts = config.get("known_hosts", [])
    qos_policies = gs.get("qos_policies", {})
    header = ["# This file is auto-generated by inetctl. Do not edit manually.", "# Marks packets for Quality of Service (QoS).", "# ACTION\tSOURCE\t\tDEST"]
    rules = []
    
    if qos_policies:
        policy_to_mark = {name: details["fw_mark"] for name, details in qos_policies.items() if "fw_mark" in details}
        static_hosts = [h for h in known_hosts if h.get("ip_assignment", {}).get("type") == "static"]
        for host in static_hosts:
            policy, mark, ip = host.get("qos_policy"), policy_to_mark.get(host.get("qos_policy")), host.get("ip_assignment", {}).get("ip")
            if all([policy, mark, ip]): 
                rules.append(f"MARK({mark})\t\t{ip}\t\t0.0.0.0/0")
    
    # The CONNMARK logic is now handled by TC_EXPERT=Yes in shorewall.conf
    # so we no longer add a footer here. The file only contains MARK rules.
    return "\n".join(header + rules) + "\n"